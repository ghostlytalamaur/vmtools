import sys
import os
import re
import bunch
import configparser
import shutil
import uuid
from pynt import task
from lxml import etree


vars = bunch.Bunch()


def normalize_path(s, dirs):
    norm = s.replace('${srcroot}', dirs.root)
    if s == norm:
        norm = os.path.join(dirs.src, s)
    return os.path.relpath(norm, dirs.base)


def readDef(config, section, option, defValue):
    if config.has_option(section, option):
        return config.get(section, option)
    else:
        return defValue


def init_vars():
    try:
        dirs = bunch.Bunch()
        ini = bunch.Bunch()
        prj = bunch.Bunch()
        dcc = bunch.Bunch()
        delphi = bunch.Bunch()
        vars['dirs'] = dirs
        vars['ini'] = ini
        vars['prj'] = prj
        vars['dcc'] = dcc
        vars['delphi'] = delphi

        dirs.base = os.getcwd()
        dirs.root = re.search('^(.*)\\\\prj(\\\\*.*)$', dirs.base).group(1)
        dirs.prj = os.path.join(dirs.root, 'prj')
        dirs.src = os.path.join(dirs.root, 'src')

        ini.local = os.path.join(dirs.prj, 'pynt.local')
        if not os.path.exists(ini.local):
            raise RuntimeError('Cannot find file ' + ini.local)

        ini.prj = os.path.join(dirs.base, 'pynt.ini')
        if not os.path.exists(ini.prj):
            raise RuntimeError('Cannot find file ' + ini.prj)

        config = configparser.ConfigParser(strict=False, allow_no_value=True)
        config.read(ini.local)
        dirs.out = config.get('common', 'out')
        dirs.dcu = config.get('common', 'dcu')
        delphi.version = config.get('common', 'DelphiVersion')
        if 'bds18' in delphi.version:
            delphi.vlc_version = 24
        elif 'bds8' in delphi.version:
            delphi.vcl_version = 15
        else:
            raise RuntimeError('Unsupported delphi version: ' + delphi.version)

        dcc.defines = None

        config = configparser.ConfigParser(strict=False, allow_no_value=True)
        config.read(ini.prj)
        prj.title = config.get('common', 'title')
        prj.name = config.get('common', 'prjname')
        prj.platform = config.get('common', 'platform')
        prj.sources = [normalize_path(s, dirs) for s in config['sources']]
        prj.dcc = bunch.Bunch()
        prj.dcc.link_packages_32 = readDef(config, 'common', 'link_packages_32', None)
        prj.dcc.link_packages_64 = readDef(config, 'common', 'link_packages_64', None)
        prj.deffile = 'cond_define.inc'

    except RuntimeError as e:
        print('Canot initizlize variables: {0}'.format(e))
        sys.exit(1)
    except Exception as e:
        print('Canot initizlize variables. Exception: {0}; Message: {1}'.format(type(e).__name__, e))
        sys.exit(1)


def generate_dproj(template_file, xpath2str, ns):
    tree = etree.parse(template_file)
    for r in xpath2str:
        if r[1] is None:
            continue
        xpath = etree.XPath(r[0], namespaces=ns)
        nodes = xpath(tree)
        if len(nodes) == 0:
            print("Cannot find path:", r[0])
        for node in nodes:
            node.text = r[1]
    tree.write(os.path.join(vars.dirs.base, vars.prj.name + '.dproj'))


@task()
def ideclean():
    '''Remove temporary and autogenerated files in current project folder'''

    files = {
        vars.prj.deffile,
        vars.prj.name + '.cfg',
        vars.prj.name + '.dsk',
        vars.prj.name + '.~dsk',
        vars.prj.name + '.dof',
        vars.prj.name + '.dsm',
        vars.prj.name + '.drc',
        vars.prj.name + '.otares',
        vars.prj.name + '.dproj.2007',
        vars.prj.name + '.dproj',
        vars.prj.name + '.identcache',
        vars.prj.name + '.dproj.local',
        vars.prj.name + '.stat',
        'filelist.txt'
    }
    for file in files:
        if os.path.exists(file):
            os.remove(file)


@task()
def _deffile():
    '''Generate .inc file by copy <ProjectName>.def to specified by params .inc file'''
    deffile = vars.prj.name + '.def'
    if os.path.isfile(deffile):
        shutil.copyfile(deffile, vars.prj.deffile)


@task(ideclean, _deffile)
def delphi10():
    '''Generate dproj file for Delphi 10.1 Berlin'''

    ns = {'ns': 'http://schemas.microsoft.com/developer/msbuild/2003'}
    replacements = (
        (".//ns:PropertyGroup/ns:ProjectGuid", "{{{0}}}".format(uuid.uuid4())),
        (".//ns:PropertyGroup/ns:MainSource", vars.prj.name + '.dpr'),
        (".//ns:ProjectExtensions/ns:BorlandProject/ns:Delphi.Personality/ns:Source/ns:Source[@Name=\'MainSource\']",
            vars.prj.name + '.dpr'),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base)'!=''\")]/ns:DCC_UnitSearchPath",
            ';'.join(vars.prj.sources)),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base)'!=''\")]/ns:DCC_ExeOutput",
            vars.dirs.out),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base)'!=''\")]/ns:DCC_DcuOutput",
            vars.dirs.dcu),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base)'!=''\")]/ns:DCC_Define",
            vars.dcc.defines),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base_Win32)'!=''\")]/ns:DCC_UsePackage",
            vars.prj.dcc.link_packages_32),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base_Win32)'!=''\")]/ns:UsePackages",
            str(vars.prj.dcc.link_packages_32 is not None)),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base_Win64)'!=''\")]/ns:DCC_UsePackage",
            vars.prj.dcc.link_packages_64),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base_Win64)'!=''\")]/ns:UsePackages",
            str(vars.prj.dcc.link_packages_64 is not None))
    )
    generate_dproj(os.path.join(vars.dirs.prj, 'template10.dproj'), replacements, ns)


@task(ideclean, _deffile)
def delphixe():
    '''Generate dproj file for Delphi XE'''

    ns = {'ns': 'http://schemas.microsoft.com/developer/msbuild/2003'}
    replacements = (
        (".//ns:PropertyGroup/ns:ProjectGuid", "{{{0}}}".format(uuid.uuid4())),
        (".//ns:PropertyGroup/ns:MainSource", vars.prj.name + '.dpr'),
        (".//ns:ProjectExtensions/ns:BorlandProject/ns:Delphi.Personality/ns:Source/ns:Source[@Name=\'MainSource\']",
            vars.prj.name + '.dpr'),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base)'!=''\")]/ns:DCC_UnitSearchPath",
            ';'.join(vars.prj.sources)),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base)'!=''\")]/ns:DCC_ExeOutput",
            vars.dirs.out),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base)'!=''\")]/ns:DCC_DcuOutput",
            vars.dirs.dcu),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base)'!=''\")]/ns:DCC_Define",
            vars.dcc.defines),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base)'!=''\")]/ns:DCC_UsePackage",
            vars.prj.dcc.link_packages_32),
        (".//ns:PropertyGroup[starts-with(@Condition, \"'$(Base)'!=''\")]/ns:UsePackages",
            str(vars.prj.dcc.link_packages_32 is not None)),
    )
    generate_dproj(os.path.join(vars.dirs.prj, 'templatexe.dproj'), replacements, ns)


@task()
def show_vars():
    '''Show all available variables in build script'''
    print("------------------------vars------------------------")
    print(vars)


init_vars()
